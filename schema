

create table principals (
  id uuid primary key default gen_random_uuid(),
  kind text not null check (kind in ('user','group','service_account')),
  username text not null unique,
  display_name text,
  email text,
  team text,
  department text,
  location text,
  is_active boolean not null default true,
  last_login timestamptz,
  metadata jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create table roles (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  description text,
  created_at timestamptz not null default now()
);

-- Actions you want to control. Add more as needed.
create table permissions (
  id uuid primary key default gen_random_uuid(),
  action text not null,                    
  resource_kind text not null,              
  unique(action, resource_kind)
);


create table role_permissions (
  role_id uuid not null references roles(id) on delete cascade,
  permission_id uuid not null references permissions(id) on delete cascade,
  primary key (role_id, permission_id)
);

create table role_bindings (
  id uuid primary key default gen_random_uuid(),
  principal_id uuid not null references principals(id) on delete cascade,
  role_id uuid not null references roles(id) on delete cascade,
  resource_path text not null,           -- see pattern rules below
  expires_at timestamptz,                -- optional time-bound access
  created_at timestamptz not null default now()
);

create table role_inherits (
  parent_role_id uuid not null references roles(id) on delete cascade,
  child_role_id  uuid not null references roles(id) on delete cascade,
  primary key (parent_role_id, child_role_id),
  check (parent_role_id <> child_role_id)
);


create table api_tokens (
  id uuid primary key default gen_random_uuid(),
  principal_id uuid not null references principals(id) on delete cascade,
  token_hash text not null unique,       -- store argon2/scrypt hash only
  created_at timestamptz not null default now(),
  expires_at timestamptz,
  revoked boolean not null default false,
  note text
);

create table audit_log (
  id bigserial primary key,
  at timestamptz not null default now(),
  principal_id uuid,
  action text not null,
  resource_path text not null,
  decision text not null check (decision in ('allow','deny')),
  reason text
);



create or replace function path_matches(binding text, target text)
returns boolean language sql immutable as $$
  select
    case
      when right(binding,2) = ':*' then left(target, length(binding)-2) = left(binding, length(binding)-2)
      else
        (select bool_and( bseg = '*' or bseg = tseg )
         from unnest(string_to_array(binding, ':')) with ordinality b(bseg, i)
         join unnest(string_to_array(target,  ':')) with ordinality t(tseg, i) using(i))
    end
$$;


create or replace view expanded_role_permissions as
with recursive inherit(role_id, permission_id) as (
  select rp.role_id, rp.permission_id from role_permissions rp
  union
  select ri.parent_role_id, i.permission_id
  from role_inherits ri
  join inherit i on i.role_id = ri.child_role_id
)
select role_id, permission_id from inherit;


create or replace function can(
  p_principal uuid,
  p_action text,
  p_resource_kind text,
  p_resource_path text,
  p_now timestamptz default now()
) returns boolean
language sql stable as $$
  select exists (
    select 1
    from role_bindings rb
    join roles r on r.id = rb.role_id
    join expanded_role_permissions erp on erp.role_id = r.id
    join permissions perm on perm.id = erp.permission_id
    where rb.principal_id = p_principal
      and (rb.expires_at is null or rb.expires_at > p_now)
      and perm.action = p_action
      and perm.resource_kind = p_resource_kind
      and path_matches(rb.resource_path, p_resource_path)
  )
$$;





insert into roles(name, description) values
('admin', 'full control'),
('sre', 'senior engineer'),
('dev', 'developer limited'),
('qa', 'qa engineer'),
('read_only', 'view only');


insert into permissions(action, resource_kind) values
('read','k8s.cluster'),
('read','k8s.namespace'),
('deploy','k8s.deployment'),
('rollback','k8s.deployment'),
('exec','k8s.pod'),
('view_logs','k8s.pod'),
('read','linux.host'),
('exec','linux.host'),
('read','svc.db'),
('write','svc.db'),
('read','svc.api'),
('write','svc.api'),
-- Cloud resource actions
('create','cloud.vm'),
('delete','cloud.vm'),
('start','cloud.vm'),
('stop','cloud.vm'),
('scale','cloud.vm'),
('create','cloud.network'),
('delete','cloud.network'),
('modify','cloud.network'),
-- Network device actions
('configure','network.device'),
('monitor','network.device'),
('reboot','network.device'),
-- CI/CD actions
('trigger','pipeline.build'),
('approve','pipeline.deploy'),
('cancel','pipeline.run'),
-- Monitoring actions
('view','monitoring.dashboard'),
('create','monitoring.alert'),
('modify','monitoring.alert'),
('acknowledge','monitoring.alert');


insert into role_inherits(parent_role_id, child_role_id)
select (select id from roles where name='admin'), id from roles where name <> 'admin';

insert into role_permissions(role_id, permission_id)
select (select id from roles where name='sre'), id from permissions
where (action,resource_kind) in
  (('read','k8s.cluster'),('read','k8s.namespace'),
   ('deploy','k8s.deployment'),('rollback','k8s.deployment'),
   ('exec','k8s.pod'),('view_logs','k8s.pod'),
   ('read','linux.host'),('exec','linux.host'),
   ('read','svc.db'),('write','svc.api'),
   -- Cloud permissions
   ('create','cloud.vm'),('delete','cloud.vm'),('start','cloud.vm'),
   ('stop','cloud.vm'),('scale','cloud.vm'),('create','cloud.network'),
   ('delete','cloud.network'),('modify','cloud.network'),
   -- Network permissions
   ('configure','network.device'),('monitor','network.device'),('reboot','network.device'),
   -- CI/CD permissions
   ('trigger','pipeline.build'),('approve','pipeline.deploy'),('cancel','pipeline.run'),
   -- Monitoring permissions
   ('view','monitoring.dashboard'),('create','monitoring.alert'),
   ('modify','monitoring.alert'),('acknowledge','monitoring.alert'));

insert into role_permissions(role_id, permission_id)
select (select id from roles where name='dev'), id from permissions
where (action,resource_kind) in
  (('read','k8s.namespace'),('deploy','k8s.deployment'),
   ('view_logs','k8s.pod'),('read','svc.api'));

insert into role_permissions(role_id, permission_id)
select (select id from roles where name='qa'), id from permissions
where (action,resource_kind) in
  (('read','k8s.namespace'),('view_logs','k8s.pod'),
   ('read','svc.api'),('read','svc.db'));

insert into principals(kind, username, display_name) values
('user','kene','Kenechukwu'),
('group','payments-team','Payments Team'),
('service_account','deploy-bot','Deploy Bot');


insert into role_bindings(principal_id, role_id, resource_path)
values (
  (select id from principals where username='kene'),
  (select id from roles where name='dev'),
  'acme:payments:staging:*:*'
);


insert into role_bindings(principal_id, role_id, resource_path)
values (
  (select id from principals where username='payments-team'),
  (select id from roles where name='qa'),
  'acme:*:staging:*:*'
);
select * from role_bindings;

insert into role_bindings(principal_id, role_id, resource_path)
values (
  (select id from principals where username='deploy-bot'),
  (select id from roles where name='sre'),
  'acme:core:prod:k8s.deployment:billing-api'
);


create table deployments (
  id uuid primary key default gen_random_uuid(),
  org text not null,
  project text not null,
  env text not null,
  name text not null,              --deployment name
  spec jsonb not null,
  created_by uuid references principals(id),
  created_at timestamptz not null default now()
);

alter table deployments enable row level security;

create or replace function current_principal() returns uuid
language sql stable as $$ select nullif(current_setting('app.principal', true),'')::uuid $$;

create policy deployments_read on deployments
for select using (
  can(current_principal(), 'read', 'k8s.deployment',
      org || ':' || project || ':' || env || ':k8s.deployment:' || name)
);

create policy deployments_write on deployments
for update using (
  can(current_principal(), 'deploy', 'k8s.deployment',
      org || ':' || project || ':' || env || ':k8s.deployment:' || name)
);



-- Additional functionality tables

-- Temporary access requests
create table access_requests (
  id uuid primary key default gen_random_uuid(),
  principal_id uuid not null references principals(id) on delete cascade,
  role_id uuid not null references roles(id) on delete cascade,
  resource_path text not null,
  reason text not null,
  requested_duration interval not null,
  status text not null check (status in ('pending','approved','rejected','expired')),
  approved_by uuid references principals(id),
  approved_at timestamptz,
  expires_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Team management
create table teams (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  description text,
  owner_id uuid references principals(id),
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create table team_members (
  team_id uuid not null references teams(id) on delete cascade,
  principal_id uuid not null references principals(id) on delete cascade,
  role text not null check (role in ('owner','admin','member')),
  joined_at timestamptz not null default now(),
  primary key (team_id, principal_id)
);

-- Resource ownership tracking
create table resource_owners (
  resource_path text not null,
  principal_id uuid not null references principals(id) on delete cascade,
  ownership_type text not null check (ownership_type in ('primary','secondary','emergency')),
  created_at timestamptz not null default now(),
  primary key (resource_path, principal_id)
);

-- Environment configurations
create table environment_configs (
  id uuid primary key default gen_random_uuid(),
  env_name text not null,
  config_key text not null,
  config_value jsonb not null,
  description text,
  created_by uuid references principals(id),
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique(env_name, config_key)
);

-- Indexes for performance optimization
create index idx_principals_username on principals(username);
create index idx_principals_email on principals(email);
create index idx_principals_team on principals(team);
create index idx_role_bindings_principal on role_bindings(principal_id);
create index idx_role_bindings_role on role_bindings(role_id);
create index idx_role_bindings_expires on role_bindings(expires_at);
create index idx_audit_log_principal on audit_log(principal_id);
create index idx_audit_log_action on audit_log(action);
create index idx_access_requests_status on access_requests(status);
create index idx_access_requests_expires on access_requests(expires_at);
create index idx_team_members_principal on team_members(principal_id);

-- Update trigger for principals table
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger update_principals_updated_at
  before update on principals
  for each row
  execute function update_updated_at_column();

create trigger update_access_requests_updated_at
  before update on access_requests
  for each row
  execute function update_updated_at_column();

create trigger update_teams_updated_at
  before update on teams
  for each row
  execute function update_updated_at_column();

create trigger update_environment_configs_updated_at
  before update on environment_configs
  for each row
  execute function update_updated_at_column();

-- Sample data for new functionality

-- Update existing principals with new attributes
update principals set 
  email = 'kene@acme.com',
  team = 'payments',
  department = 'engineering',
  location = 'Lagos',
  is_active = true
where username = 'kene';

update principals set 
  email = 'deploy@acme.com',
  team = 'platform',
  department = 'operations', 
  location = 'Cloud',
  is_active = true
where username = 'deploy-bot';

-- Add sample teams
insert into teams (name, description, owner_id) values
('platform-engineering', 'Platform infrastructure team', 
 (select id from principals where username = 'deploy-bot')),
('payments-team', 'Payments service team',
 (select id from principals where username = 'kene'));

-- Add team members
insert into team_members (team_id, principal_id, role) values
((select id from teams where name = 'platform-engineering'),
 (select id from principals where username = 'deploy-bot'), 'owner'),
((select id from teams where name = 'payments-team'),
 (select id from principals where username = 'kene'), 'admin'),
((select id from teams where name = 'payments-team'),
 (select id from principals where username = 'payments-team'), 'member');

-- Add resource ownership
insert into resource_owners (resource_path, principal_id, ownership_type) values
('acme:payments:prod:k8s.deployment:billing-api',
 (select id from principals where username = 'kene'), 'primary'),
('acme:core:prod:k8s.deployment:billing-api',
 (select id from principals where username = 'deploy-bot'), 'primary'),
('acme:*:prod:cloud.vm:*',
 (select id from principals where username = 'deploy-bot'), 'secondary');

-- Add environment configurations
insert into environment_configs (env_name, config_key, config_value, description, created_by) values
('prod', 'max_deployments', '{"value": 5}', 'Maximum concurrent deployments in production',
 (select id from principals where username = 'deploy-bot')),
('staging', 'auto_approve', '{"value": true}', 'Auto-approve deployments in staging',
 (select id from principals where username = 'deploy-bot')),
('prod', 'maintenance_window', '{"start": "02:00", "end": "04:00", "timezone": "UTC"}', 
 'Production maintenance window', (select id from principals where username = 'deploy-bot'));

-- Sample access request
insert into access_requests (principal_id, role_id, resource_path, reason, requested_duration, status) values
((select id from principals where username = 'kene'),
 (select id from roles where name = 'sre'),
 'acme:payments:prod:cloud.vm:database-server',
 'Emergency database maintenance required',
 interval '2 hours',
 'pending');

revoke all on all tables in schema public from public;